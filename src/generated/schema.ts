// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Executor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Executor entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Executor entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Executor", id.toString(), this);
  }

  static load(id: string): Executor | null {
    return store.get("Executor", id) as Executor | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get authorized(): boolean {
    let value = this.get("authorized");
    return value.toBoolean();
  }

  set authorized(value: boolean) {
    this.set("authorized", Value.fromBoolean(value));
  }

  get propositionThreshold(): BigInt {
    let value = this.get("propositionThreshold");
    return value.toBigInt();
  }

  set propositionThreshold(value: BigInt) {
    this.set("propositionThreshold", Value.fromBigInt(value));
  }

  get votingDuration(): BigInt {
    let value = this.get("votingDuration");
    return value.toBigInt();
  }

  set votingDuration(value: BigInt) {
    this.set("votingDuration", Value.fromBigInt(value));
  }

  get voteDifferential(): BigInt {
    let value = this.get("voteDifferential");
    return value.toBigInt();
  }

  set voteDifferential(value: BigInt) {
    this.set("voteDifferential", Value.fromBigInt(value));
  }

  get minimumQuorum(): BigInt {
    let value = this.get("minimumQuorum");
    return value.toBigInt();
  }

  set minimumQuorum(value: BigInt) {
    this.set("minimumQuorum", Value.fromBigInt(value));
  }

  get gracePeriod(): BigInt {
    let value = this.get("gracePeriod");
    return value.toBigInt();
  }

  set gracePeriod(value: BigInt) {
    this.set("gracePeriod", Value.fromBigInt(value));
  }

  get executionDelay(): BigInt {
    let value = this.get("executionDelay");
    return value.toBigInt();
  }

  set executionDelay(value: BigInt) {
    this.set("executionDelay", Value.fromBigInt(value));
  }

  get admin(): Bytes {
    let value = this.get("admin");
    return value.toBytes();
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get authorizationBlock(): BigInt {
    let value = this.get("authorizationBlock");
    return value.toBigInt();
  }

  set authorizationBlock(value: BigInt) {
    this.set("authorizationBlock", Value.fromBigInt(value));
  }

  get authorizationTimestamp(): BigInt {
    let value = this.get("authorizationTimestamp");
    return value.toBigInt();
  }

  set authorizationTimestamp(value: BigInt) {
    this.set("authorizationTimestamp", Value.fromBigInt(value));
  }

  get pendingAdmin(): Bytes | null {
    let value = this.get("pendingAdmin");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set pendingAdmin(value: Bytes | null) {
    if (value === null) {
      this.unset("pendingAdmin");
    } else {
      this.set("pendingAdmin", Value.fromBytes(value as Bytes));
    }
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Proposal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Proposal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Proposal", id.toString(), this);
  }

  static load(id: string): Proposal | null {
    return store.get("Proposal", id) as Proposal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get ipfsHash(): string {
    let value = this.get("ipfsHash");
    return value.toString();
  }

  set ipfsHash(value: string) {
    this.set("ipfsHash", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get executor(): string | null {
    let value = this.get("executor");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set executor(value: string | null) {
    if (value === null) {
      this.unset("executor");
    } else {
      this.set("executor", Value.fromString(value as string));
    }
  }

  get targets(): Array<Bytes> | null {
    let value = this.get("targets");
    if (value === null) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set targets(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("targets");
    } else {
      this.set("targets", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get values(): Array<BigInt> | null {
    let value = this.get("values");
    if (value === null) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set values(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("values");
    } else {
      this.set("values", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get signatures(): Array<string> | null {
    let value = this.get("signatures");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set signatures(value: Array<string> | null) {
    if (value === null) {
      this.unset("signatures");
    } else {
      this.set("signatures", Value.fromStringArray(value as Array<string>));
    }
  }

  get calldatas(): Array<Bytes> | null {
    let value = this.get("calldatas");
    if (value === null) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set calldatas(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("calldatas");
    } else {
      this.set("calldatas", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get withDelegatecalls(): Array<boolean> | null {
    let value = this.get("withDelegatecalls");
    if (value === null) {
      return null;
    } else {
      return value.toBooleanArray();
    }
  }

  set withDelegatecalls(value: Array<boolean> | null) {
    if (value === null) {
      this.unset("withDelegatecalls");
    } else {
      this.set(
        "withDelegatecalls",
        Value.fromBooleanArray(value as Array<boolean>)
      );
    }
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    return value.toBigInt();
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get endBlock(): BigInt {
    let value = this.get("endBlock");
    return value.toBigInt();
  }

  set endBlock(value: BigInt) {
    this.set("endBlock", Value.fromBigInt(value));
  }

  get governanceStrategy(): Bytes {
    let value = this.get("governanceStrategy");
    return value.toBytes();
  }

  set governanceStrategy(value: Bytes) {
    this.set("governanceStrategy", Value.fromBytes(value));
  }

  get currentYesVote(): BigInt {
    let value = this.get("currentYesVote");
    return value.toBigInt();
  }

  set currentYesVote(value: BigInt) {
    this.set("currentYesVote", Value.fromBigInt(value));
  }

  get currentNoVote(): BigInt {
    let value = this.get("currentNoVote");
    return value.toBigInt();
  }

  set currentNoVote(value: BigInt) {
    this.set("currentNoVote", Value.fromBigInt(value));
  }

  get winner(): string {
    let value = this.get("winner");
    return value.toString();
  }

  set winner(value: string) {
    this.set("winner", Value.fromString(value));
  }

  get votes(): Array<string> {
    let value = this.get("votes");
    return value.toStringArray();
  }

  set votes(value: Array<string>) {
    this.set("votes", Value.fromStringArray(value));
  }

  get createdTimestamp(): i32 {
    let value = this.get("createdTimestamp");
    return value.toI32();
  }

  set createdTimestamp(value: i32) {
    this.set("createdTimestamp", Value.fromI32(value));
  }

  get executionTime(): BigInt | null {
    let value = this.get("executionTime");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executionTime(value: BigInt | null) {
    if (value === null) {
      this.unset("executionTime");
    } else {
      this.set("executionTime", Value.fromBigInt(value as BigInt));
    }
  }

  get initiatorQueueing(): Bytes | null {
    let value = this.get("initiatorQueueing");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initiatorQueueing(value: Bytes | null) {
    if (value === null) {
      this.unset("initiatorQueueing");
    } else {
      this.set("initiatorQueueing", Value.fromBytes(value as Bytes));
    }
  }

  get initiatorExecution(): Bytes | null {
    let value = this.get("initiatorExecution");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initiatorExecution(value: Bytes | null) {
    if (value === null) {
      this.unset("initiatorExecution");
    } else {
      this.set("initiatorExecution", Value.fromBytes(value as Bytes));
    }
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    return value.toI32();
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }

  get lastUpdateBlock(): BigInt {
    let value = this.get("lastUpdateBlock");
    return value.toBigInt();
  }

  set lastUpdateBlock(value: BigInt) {
    this.set("lastUpdateBlock", Value.fromBigInt(value));
  }

  get title(): string {
    let value = this.get("title");
    return value.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get shortDescription(): string {
    let value = this.get("shortDescription");
    return value.toString();
  }

  set shortDescription(value: string) {
    this.set("shortDescription", Value.fromString(value));
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Vote entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Vote entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Vote", id.toString(), this);
  }

  static load(id: string): Vote | null {
    return store.get("Vote", id) as Vote | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get voter(): Bytes {
    let value = this.get("voter");
    return value.toBytes();
  }

  set voter(value: Bytes) {
    this.set("voter", Value.fromBytes(value));
  }

  get support(): boolean {
    let value = this.get("support");
    return value.toBoolean();
  }

  set support(value: boolean) {
    this.set("support", Value.fromBoolean(value));
  }

  get votingPower(): BigInt {
    let value = this.get("votingPower");
    return value.toBigInt();
  }

  set votingPower(value: BigInt) {
    this.set("votingPower", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}
