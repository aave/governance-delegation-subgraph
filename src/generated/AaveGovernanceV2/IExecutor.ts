// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CancelledAction extends ethereum.Event {
  get params(): CancelledAction__Params {
    return new CancelledAction__Params(this);
  }
}

export class CancelledAction__Params {
  _event: CancelledAction;

  constructor(event: CancelledAction) {
    this._event = event;
  }

  get actionHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get target(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get signature(): string {
    return this._event.parameters[3].value.toString();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get executionTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get withDelegatecall(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class ExecutedAction extends ethereum.Event {
  get params(): ExecutedAction__Params {
    return new ExecutedAction__Params(this);
  }
}

export class ExecutedAction__Params {
  _event: ExecutedAction;

  constructor(event: ExecutedAction) {
    this._event = event;
  }

  get actionHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get target(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get signature(): string {
    return this._event.parameters[3].value.toString();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get executionTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get withDelegatecall(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }

  get resultData(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }
}

export class NewAdmin extends ethereum.Event {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this);
  }
}

export class NewAdmin__Params {
  _event: NewAdmin;

  constructor(event: NewAdmin) {
    this._event = event;
  }

  get newAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewDelay extends ethereum.Event {
  get params(): NewDelay__Params {
    return new NewDelay__Params(this);
  }
}

export class NewDelay__Params {
  _event: NewDelay;

  constructor(event: NewDelay) {
    this._event = event;
  }

  get delay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewPendingAdmin extends ethereum.Event {
  get params(): NewPendingAdmin__Params {
    return new NewPendingAdmin__Params(this);
  }
}

export class NewPendingAdmin__Params {
  _event: NewPendingAdmin;

  constructor(event: NewPendingAdmin) {
    this._event = event;
  }

  get newPendingAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class QueuedAction extends ethereum.Event {
  get params(): QueuedAction__Params {
    return new QueuedAction__Params(this);
  }
}

export class QueuedAction__Params {
  _event: QueuedAction;

  constructor(event: QueuedAction) {
    this._event = event;
  }

  get actionHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get target(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get signature(): string {
    return this._event.parameters[3].value.toString();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get executionTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get withDelegatecall(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class IExecutor extends ethereum.SmartContract {
  static bind(address: Address): IExecutor {
    return new IExecutor("IExecutor", address);
  }

  GRACE_PERIOD(): BigInt {
    let result = super.call("GRACE_PERIOD", "GRACE_PERIOD():(uint256)", []);

    return result[0].toBigInt();
  }

  try_GRACE_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("GRACE_PERIOD", "GRACE_PERIOD():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAXIMUM_DELAY(): BigInt {
    let result = super.call("MAXIMUM_DELAY", "MAXIMUM_DELAY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAXIMUM_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAXIMUM_DELAY",
      "MAXIMUM_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINIMUM_DELAY(): BigInt {
    let result = super.call("MINIMUM_DELAY", "MINIMUM_DELAY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MINIMUM_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_DELAY",
      "MINIMUM_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINIMUM_QUORUM(): BigInt {
    let result = super.call("MINIMUM_QUORUM", "MINIMUM_QUORUM():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MINIMUM_QUORUM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_QUORUM",
      "MINIMUM_QUORUM():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ONE_HUNDRED_WITH_PRECISION(): BigInt {
    let result = super.call(
      "ONE_HUNDRED_WITH_PRECISION",
      "ONE_HUNDRED_WITH_PRECISION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ONE_HUNDRED_WITH_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ONE_HUNDRED_WITH_PRECISION",
      "ONE_HUNDRED_WITH_PRECISION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PROPOSITION_THRESHOLD(): BigInt {
    let result = super.call(
      "PROPOSITION_THRESHOLD",
      "PROPOSITION_THRESHOLD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PROPOSITION_THRESHOLD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PROPOSITION_THRESHOLD",
      "PROPOSITION_THRESHOLD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VOTE_DIFFERENTIAL(): BigInt {
    let result = super.call(
      "VOTE_DIFFERENTIAL",
      "VOTE_DIFFERENTIAL():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_VOTE_DIFFERENTIAL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "VOTE_DIFFERENTIAL",
      "VOTE_DIFFERENTIAL():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VOTING_DURATION(): BigInt {
    let result = super.call(
      "VOTING_DURATION",
      "VOTING_DURATION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_VOTING_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "VOTING_DURATION",
      "VOTING_DURATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancelTransaction(
    target: Address,
    value: BigInt,
    signature: string,
    data: Bytes,
    executionTime: BigInt,
    withDelegatecall: boolean
  ): Bytes {
    let result = super.call(
      "cancelTransaction",
      "cancelTransaction(address,uint256,string,bytes,uint256,bool):(bytes32)",
      [
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromString(signature),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(executionTime),
        ethereum.Value.fromBoolean(withDelegatecall)
      ]
    );

    return result[0].toBytes();
  }

  try_cancelTransaction(
    target: Address,
    value: BigInt,
    signature: string,
    data: Bytes,
    executionTime: BigInt,
    withDelegatecall: boolean
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "cancelTransaction",
      "cancelTransaction(address,uint256,string,bytes,uint256,bool):(bytes32)",
      [
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromString(signature),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(executionTime),
        ethereum.Value.fromBoolean(withDelegatecall)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAdmin(): Address {
    let result = super.call("getAdmin", "getAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_getAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall("getAdmin", "getAdmin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDelay(): BigInt {
    let result = super.call("getDelay", "getDelay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getDelay", "getDelay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinimumPropositionPowerNeeded(
    governance: Address,
    blockNumber: BigInt
  ): BigInt {
    let result = super.call(
      "getMinimumPropositionPowerNeeded",
      "getMinimumPropositionPowerNeeded(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMinimumPropositionPowerNeeded(
    governance: Address,
    blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinimumPropositionPowerNeeded",
      "getMinimumPropositionPowerNeeded(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinimumVotingPowerNeeded(votingSupply: BigInt): BigInt {
    let result = super.call(
      "getMinimumVotingPowerNeeded",
      "getMinimumVotingPowerNeeded(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(votingSupply)]
    );

    return result[0].toBigInt();
  }

  try_getMinimumVotingPowerNeeded(
    votingSupply: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinimumVotingPowerNeeded",
      "getMinimumVotingPowerNeeded(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(votingSupply)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingAdmin(): Address {
    let result = super.call(
      "getPendingAdmin",
      "getPendingAdmin():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getPendingAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPendingAdmin",
      "getPendingAdmin():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isActionQueued(actionHash: Bytes): boolean {
    let result = super.call(
      "isActionQueued",
      "isActionQueued(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(actionHash)]
    );

    return result[0].toBoolean();
  }

  try_isActionQueued(actionHash: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isActionQueued",
      "isActionQueued(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(actionHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isProposalOverGracePeriod(governance: Address, proposalId: BigInt): boolean {
    let result = super.call(
      "isProposalOverGracePeriod",
      "isProposalOverGracePeriod(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromUnsignedBigInt(proposalId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isProposalOverGracePeriod(
    governance: Address,
    proposalId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isProposalOverGracePeriod",
      "isProposalOverGracePeriod(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromUnsignedBigInt(proposalId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isProposalPassed(governance: Address, proposalId: BigInt): boolean {
    let result = super.call(
      "isProposalPassed",
      "isProposalPassed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromUnsignedBigInt(proposalId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isProposalPassed(
    governance: Address,
    proposalId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isProposalPassed",
      "isProposalPassed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromUnsignedBigInt(proposalId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPropositionPowerEnough(
    governance: Address,
    user: Address,
    blockNumber: BigInt
  ): boolean {
    let result = super.call(
      "isPropositionPowerEnough",
      "isPropositionPowerEnough(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );

    return result[0].toBoolean();
  }

  try_isPropositionPowerEnough(
    governance: Address,
    user: Address,
    blockNumber: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPropositionPowerEnough",
      "isPropositionPowerEnough(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isQuorumValid(governance: Address, proposalId: BigInt): boolean {
    let result = super.call(
      "isQuorumValid",
      "isQuorumValid(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromUnsignedBigInt(proposalId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isQuorumValid(
    governance: Address,
    proposalId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isQuorumValid",
      "isQuorumValid(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromUnsignedBigInt(proposalId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isVoteDifferentialValid(governance: Address, proposalId: BigInt): boolean {
    let result = super.call(
      "isVoteDifferentialValid",
      "isVoteDifferentialValid(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromUnsignedBigInt(proposalId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isVoteDifferentialValid(
    governance: Address,
    proposalId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isVoteDifferentialValid",
      "isVoteDifferentialValid(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromUnsignedBigInt(proposalId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  queueTransaction(
    target: Address,
    value: BigInt,
    signature: string,
    data: Bytes,
    executionTime: BigInt,
    withDelegatecall: boolean
  ): Bytes {
    let result = super.call(
      "queueTransaction",
      "queueTransaction(address,uint256,string,bytes,uint256,bool):(bytes32)",
      [
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromString(signature),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(executionTime),
        ethereum.Value.fromBoolean(withDelegatecall)
      ]
    );

    return result[0].toBytes();
  }

  try_queueTransaction(
    target: Address,
    value: BigInt,
    signature: string,
    data: Bytes,
    executionTime: BigInt,
    withDelegatecall: boolean
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "queueTransaction",
      "queueTransaction(address,uint256,string,bytes,uint256,bool):(bytes32)",
      [
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromString(signature),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(executionTime),
        ethereum.Value.fromBoolean(withDelegatecall)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  validateCreatorOfProposal(
    governance: Address,
    user: Address,
    blockNumber: BigInt
  ): boolean {
    let result = super.call(
      "validateCreatorOfProposal",
      "validateCreatorOfProposal(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );

    return result[0].toBoolean();
  }

  try_validateCreatorOfProposal(
    governance: Address,
    user: Address,
    blockNumber: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validateCreatorOfProposal",
      "validateCreatorOfProposal(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validateProposalCancellation(
    governance: Address,
    user: Address,
    blockNumber: BigInt
  ): boolean {
    let result = super.call(
      "validateProposalCancellation",
      "validateProposalCancellation(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );

    return result[0].toBoolean();
  }

  try_validateProposalCancellation(
    governance: Address,
    user: Address,
    blockNumber: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validateProposalCancellation",
      "validateProposalCancellation(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get delay(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get gracePeriod(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minimumDelay(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get maximumDelay(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get propositionThreshold(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get voteDuration(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get voteDifferential(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get minimumQuorum(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptAdminCall extends ethereum.Call {
  get inputs(): AcceptAdminCall__Inputs {
    return new AcceptAdminCall__Inputs(this);
  }

  get outputs(): AcceptAdminCall__Outputs {
    return new AcceptAdminCall__Outputs(this);
  }
}

export class AcceptAdminCall__Inputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }
}

export class AcceptAdminCall__Outputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }
}

export class CancelTransactionCall extends ethereum.Call {
  get inputs(): CancelTransactionCall__Inputs {
    return new CancelTransactionCall__Inputs(this);
  }

  get outputs(): CancelTransactionCall__Outputs {
    return new CancelTransactionCall__Outputs(this);
  }
}

export class CancelTransactionCall__Inputs {
  _call: CancelTransactionCall;

  constructor(call: CancelTransactionCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signature(): string {
    return this._call.inputValues[2].value.toString();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get executionTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get withDelegatecall(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class CancelTransactionCall__Outputs {
  _call: CancelTransactionCall;

  constructor(call: CancelTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ExecuteTransactionCall extends ethereum.Call {
  get inputs(): ExecuteTransactionCall__Inputs {
    return new ExecuteTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteTransactionCall__Outputs {
    return new ExecuteTransactionCall__Outputs(this);
  }
}

export class ExecuteTransactionCall__Inputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signature(): string {
    return this._call.inputValues[2].value.toString();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get executionTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get withDelegatecall(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class ExecuteTransactionCall__Outputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class QueueTransactionCall extends ethereum.Call {
  get inputs(): QueueTransactionCall__Inputs {
    return new QueueTransactionCall__Inputs(this);
  }

  get outputs(): QueueTransactionCall__Outputs {
    return new QueueTransactionCall__Outputs(this);
  }
}

export class QueueTransactionCall__Inputs {
  _call: QueueTransactionCall;

  constructor(call: QueueTransactionCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signature(): string {
    return this._call.inputValues[2].value.toString();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get executionTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get withDelegatecall(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class QueueTransactionCall__Outputs {
  _call: QueueTransactionCall;

  constructor(call: QueueTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SetDelayCall extends ethereum.Call {
  get inputs(): SetDelayCall__Inputs {
    return new SetDelayCall__Inputs(this);
  }

  get outputs(): SetDelayCall__Outputs {
    return new SetDelayCall__Outputs(this);
  }
}

export class SetDelayCall__Inputs {
  _call: SetDelayCall;

  constructor(call: SetDelayCall) {
    this._call = call;
  }

  get delay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDelayCall__Outputs {
  _call: SetDelayCall;

  constructor(call: SetDelayCall) {
    this._call = call;
  }
}

export class SetPendingAdminCall extends ethereum.Call {
  get inputs(): SetPendingAdminCall__Inputs {
    return new SetPendingAdminCall__Inputs(this);
  }

  get outputs(): SetPendingAdminCall__Outputs {
    return new SetPendingAdminCall__Outputs(this);
  }
}

export class SetPendingAdminCall__Inputs {
  _call: SetPendingAdminCall;

  constructor(call: SetPendingAdminCall) {
    this._call = call;
  }

  get newPendingAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPendingAdminCall__Outputs {
  _call: SetPendingAdminCall;

  constructor(call: SetPendingAdminCall) {
    this._call = call;
  }
}
