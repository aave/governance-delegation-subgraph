// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GovernanceStrategy extends ethereum.SmartContract {
  static bind(address: Address): GovernanceStrategy {
    return new GovernanceStrategy("GovernanceStrategy", address);
  }

  AAVE(): Address {
    let result = super.call("AAVE", "AAVE():(address)", []);

    return result[0].toAddress();
  }

  try_AAVE(): ethereum.CallResult<Address> {
    let result = super.tryCall("AAVE", "AAVE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  STK_AAVE(): Address {
    let result = super.call("STK_AAVE", "STK_AAVE():(address)", []);

    return result[0].toAddress();
  }

  try_STK_AAVE(): ethereum.CallResult<Address> {
    let result = super.tryCall("STK_AAVE", "STK_AAVE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPropositionPowerAt(user: Address, blockNumber: BigInt): BigInt {
    let result = super.call(
      "getPropositionPowerAt",
      "getPropositionPowerAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPropositionPowerAt(
    user: Address,
    blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPropositionPowerAt",
      "getPropositionPowerAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalPropositionSupplyAt(blockNumber: BigInt): BigInt {
    let result = super.call(
      "getTotalPropositionSupplyAt",
      "getTotalPropositionSupplyAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );

    return result[0].toBigInt();
  }

  try_getTotalPropositionSupplyAt(
    blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalPropositionSupplyAt",
      "getTotalPropositionSupplyAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalVotingSupplyAt(blockNumber: BigInt): BigInt {
    let result = super.call(
      "getTotalVotingSupplyAt",
      "getTotalVotingSupplyAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );

    return result[0].toBigInt();
  }

  try_getTotalVotingSupplyAt(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalVotingSupplyAt",
      "getTotalVotingSupplyAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotingPowerAt(user: Address, blockNumber: BigInt): BigInt {
    let result = super.call(
      "getVotingPowerAt",
      "getVotingPowerAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_getVotingPowerAt(
    user: Address,
    blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVotingPowerAt",
      "getVotingPowerAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get aave(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stkAave(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
